{
  plugins: {
    // Configuration of "storage_manager" plugin:
    storage_manager: {
      volumes: {
        s3: {

            // AWS region to which connect (see https://docs.aws.amazon.com/general/latest/gr/s3.html). 
            // This field is mandatory if you are going to communicate with an AWS S3 server and
            // optional in case you are working with a MinIO S3 server.
            region: "eu-west-1",

            // Endpoint where the S3 server is located.
            // This parameter allows you to specify a custom endpoint when working with a MinIO S3 
            // server.
            // This field is mandatory if you are working with a MinIO server and optional in case
            // you are working with an AWS S3 server as long as you specified the region, in which
            // case the endpoint will be resolved automatically.
            url: "https://s3.eu-west-1.amazonaws.com",

            // Optional TLS specific parameters to enable HTTPS with MINIO. 
            // Configuration shared by all the associated storages. 
            tls: {
              private: {
                
                // Certificate authority to authenticate the server.
                root_ca_certificate_file: "<YOUR_CERTIFICATE_PATH>",
                // Alternatively you can inline your certificate:
                // - encoded with base 64:
                root_ca_certificate_base64: "<YOUR_CERTIFICATE_ENCODED_WITH_BASE64>",
                // - raw certificate:
                root_ca_certificate_raw: "<YOUR_RAW_CERTIFICATE>",
              }
            },
        }
      },
      storages: {
        // Configuration of a "demo" storage using the S3 volume. Each storage is associated to a
        // single S3 bucket.
        s3_storage: {

          // The key expression this storage will subscribes to
          key_expr: "s3/example/*",

          // this prefix will be stripped from the received key when converting to database key.
          // i.e.: "demo/example/a/b" will be stored as "a/b"
          strip_prefix: "s3/example",

          volume: {
            // Id of the volume this storage is associated to
            id: "s3",

            // Bucket to which this storage is associated to
            bucket: "zenoh-bucket",

            // The storage attempts to create the bucket, but if the bucket already exists and is
            // owned by you, then with 'reuse_bucket' you can associate that preexisting bucket to
            // the storage, otherwise it will fail.
            reuse_bucket: true,

            // If the storage is read only, it will only handle GET requests
            read_only: false,

            // strategy on storage closure, either `destroy_bucket` or `do_nothing`
            on_closure: "destroy_bucket",

            private: {
                // Credentials for interacting with the S3 bucket
                access_key: "AKIAIOSFODNN7EXAMPLE",
                secret_key: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
            },
          }
        },
      }
    },
    // Optionally, add the REST plugin
    rest: { http_port: 8000 }
  },
}
